// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: protob.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BrokerClient is the client API for Broker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrokerClient interface {
	GetFulcrumAddress(ctx context.Context, in *GetFulcrumRequest, opts ...grpc.CallOption) (*GetFulcrumResponse, error)
}

type brokerClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerClient(cc grpc.ClientConnInterface) BrokerClient {
	return &brokerClient{cc}
}

func (c *brokerClient) GetFulcrumAddress(ctx context.Context, in *GetFulcrumRequest, opts ...grpc.CallOption) (*GetFulcrumResponse, error) {
	out := new(GetFulcrumResponse)
	err := c.cc.Invoke(ctx, "/grpc.Broker/GetFulcrumAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokerServer is the server API for Broker service.
// All implementations must embed UnimplementedBrokerServer
// for forward compatibility
type BrokerServer interface {
	GetFulcrumAddress(context.Context, *GetFulcrumRequest) (*GetFulcrumResponse, error)
	mustEmbedUnimplementedBrokerServer()
}

// UnimplementedBrokerServer must be embedded to have forward compatible implementations.
type UnimplementedBrokerServer struct {
}

func (UnimplementedBrokerServer) GetFulcrumAddress(context.Context, *GetFulcrumRequest) (*GetFulcrumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFulcrumAddress not implemented")
}
func (UnimplementedBrokerServer) mustEmbedUnimplementedBrokerServer() {}

// UnsafeBrokerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrokerServer will
// result in compilation errors.
type UnsafeBrokerServer interface {
	mustEmbedUnimplementedBrokerServer()
}

func RegisterBrokerServer(s grpc.ServiceRegistrar, srv BrokerServer) {
	s.RegisterService(&Broker_ServiceDesc, srv)
}

func _Broker_GetFulcrumAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFulcrumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).GetFulcrumAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Broker/GetFulcrumAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).GetFulcrumAddress(ctx, req.(*GetFulcrumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Broker_ServiceDesc is the grpc.ServiceDesc for Broker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Broker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Broker",
	HandlerType: (*BrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFulcrumAddress",
			Handler:    _Broker_GetFulcrumAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protob.proto",
}

// FulcrumServiceClient is the client API for FulcrumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FulcrumServiceClient interface {
	PropagarCambios(ctx context.Context, in *PropagarRequest, opts ...grpc.CallOption) (*PropagarResponse, error)
	Merge(ctx context.Context, in *MergeRequest, opts ...grpc.CallOption) (*MergeResponse, error)
	ObtenerDatos(ctx context.Context, in *ObtenerDatosRequest, opts ...grpc.CallOption) (*ObtenerDatosResponse, error)
}

type fulcrumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFulcrumServiceClient(cc grpc.ClientConnInterface) FulcrumServiceClient {
	return &fulcrumServiceClient{cc}
}

func (c *fulcrumServiceClient) PropagarCambios(ctx context.Context, in *PropagarRequest, opts ...grpc.CallOption) (*PropagarResponse, error) {
	out := new(PropagarResponse)
	err := c.cc.Invoke(ctx, "/grpc.FulcrumService/PropagarCambios", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulcrumServiceClient) Merge(ctx context.Context, in *MergeRequest, opts ...grpc.CallOption) (*MergeResponse, error) {
	out := new(MergeResponse)
	err := c.cc.Invoke(ctx, "/grpc.FulcrumService/Merge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulcrumServiceClient) ObtenerDatos(ctx context.Context, in *ObtenerDatosRequest, opts ...grpc.CallOption) (*ObtenerDatosResponse, error) {
	out := new(ObtenerDatosResponse)
	err := c.cc.Invoke(ctx, "/grpc.FulcrumService/ObtenerDatos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FulcrumServiceServer is the server API for FulcrumService service.
// All implementations must embed UnimplementedFulcrumServiceServer
// for forward compatibility
type FulcrumServiceServer interface {
	PropagarCambios(context.Context, *PropagarRequest) (*PropagarResponse, error)
	Merge(context.Context, *MergeRequest) (*MergeResponse, error)
	ObtenerDatos(context.Context, *ObtenerDatosRequest) (*ObtenerDatosResponse, error)
	mustEmbedUnimplementedFulcrumServiceServer()
}

// UnimplementedFulcrumServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFulcrumServiceServer struct {
}

func (UnimplementedFulcrumServiceServer) PropagarCambios(context.Context, *PropagarRequest) (*PropagarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropagarCambios not implemented")
}
func (UnimplementedFulcrumServiceServer) Merge(context.Context, *MergeRequest) (*MergeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Merge not implemented")
}
func (UnimplementedFulcrumServiceServer) ObtenerDatos(context.Context, *ObtenerDatosRequest) (*ObtenerDatosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtenerDatos not implemented")
}
func (UnimplementedFulcrumServiceServer) mustEmbedUnimplementedFulcrumServiceServer() {}

// UnsafeFulcrumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FulcrumServiceServer will
// result in compilation errors.
type UnsafeFulcrumServiceServer interface {
	mustEmbedUnimplementedFulcrumServiceServer()
}

func RegisterFulcrumServiceServer(s grpc.ServiceRegistrar, srv FulcrumServiceServer) {
	s.RegisterService(&FulcrumService_ServiceDesc, srv)
}

func _FulcrumService_PropagarCambios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropagarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcrumServiceServer).PropagarCambios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.FulcrumService/PropagarCambios",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcrumServiceServer).PropagarCambios(ctx, req.(*PropagarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FulcrumService_Merge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcrumServiceServer).Merge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.FulcrumService/Merge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcrumServiceServer).Merge(ctx, req.(*MergeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FulcrumService_ObtenerDatos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObtenerDatosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcrumServiceServer).ObtenerDatos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.FulcrumService/ObtenerDatos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcrumServiceServer).ObtenerDatos(ctx, req.(*ObtenerDatosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FulcrumService_ServiceDesc is the grpc.ServiceDesc for FulcrumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FulcrumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.FulcrumService",
	HandlerType: (*FulcrumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PropagarCambios",
			Handler:    _FulcrumService_PropagarCambios_Handler,
		},
		{
			MethodName: "Merge",
			Handler:    _FulcrumService_Merge_Handler,
		},
		{
			MethodName: "ObtenerDatos",
			Handler:    _FulcrumService_ObtenerDatos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protob.proto",
}
